name: Build ministo

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always
  BUILD_TARGET: x86_64-unknown-linux-musl
  BINARY_NAME: ministo

jobs:
  build:
    runs-on: ubuntu-latest
    container: clux/muslrust:stable

    steps:
      # Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Ensure full history for accurate caching

      # Cache Rust dependencies and build artifacts
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # Install musl-g++, cmake, and dependencies
      - name: Install dependencies
        run: |
          apk update
          apk add --no-cache musl-dev g++ cmake

      # Configure musl-g++ for CMake and Cargo
      - name: Configure environment
        run: |
          echo "CXX=x86_64-linux-musl-g++" >> $GITHUB_ENV
          echo "CMAKE_CXX_COMPILER=x86_64-linux-musl-g++" >> $GITHUB_ENV
          echo "RUSTFLAGS=-C link-arg=-static-libstdc++ -C target-feature=+crt-static" >> $GITHUB_ENV
          echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-linux-musl-g++" >> $GITHUB_ENV

      # Build the project
      - name: Build
        run: |
          rustup target add $BUILD_TARGET
          cargo build --release --target $BUILD_TARGET

      # Strip the binary to reduce size
      - name: Strip binary
        run: x86_64-linux-musl-strip target/$BUILD_TARGET/release/$BINARY_NAME

      # Verify static linking
      - name: Verify static binary
        run: ldd target/$BUILD_TARGET/release/$BINARY_NAME || true

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ env.BUILD_TARGET }}
          path: target/${{ env.BUILD_TARGET }}/release/${{ env.BINARY_NAME }}

      # Create and upload release archive
      - name: Create release archive
        if: github.event_name == 'release'
        run: |
          mkdir ${{ env.BINARY_NAME }}-${{ github.event.release.tag_name }}-${{ env.BUILD_TARGET }}
          mv target/$BUILD_TARGET/release/$BINARY_NAME ${{ env.BINARY_NAME }}-${{ github.event.release.tag_name }}-${{ env.BUILD_TARGET }}/
          tar -czf ${{ env.BINARY_NAME }}-${{ github.event.release.tag_name }}-${{ env.BUILD_TARGET }}.tar.gz ${{ env.BINARY_NAME }}-${{ github.event.release.tag_name }}-${{ env.BUILD_TARGET }}

      - name: Release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.BINARY_NAME }}-${{ github.event.release.tag_name }}-${{ env.BUILD_TARGET }}.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
